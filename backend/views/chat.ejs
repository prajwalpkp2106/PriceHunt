<link rel="stylesheet" href="/chatbot.css">
<script src="https://cdn.tailwindcss.com"></script>
<section class="text-gray-600 body-font">
    <div class="container px-5 py-12 mx-auto">
      <p
        class="text-3xl font-extrabold title-font text-violet-600 mb-14 text-center"
      >
        Hello, Welcome to our ChatBot
      </p>

      <div class="flex flex-wrap -m-4">
        <div class="p-3 md:w-1/3 w-full">
          <div class="h-full bg-gray-200 p-8 rounded shadow-l">
            <p class="leading-relaxed mb-2 text-lg">
              Our ChatBot is here to assist you in finding answers to your
              questions. Feel free to ask anything, and it will do its best to
              provide you with helpful responses.
            </p>
          </div>
        </div>

        <div class="p-3 md:w-1/3 w-full">
          <div class="h-full bg-gray-200 p-8 rounded shadow-xl">
            <p class="leading-relaxed mb-2 text-lg">
              Discover a world where assistance is just a message away, and
              shopping is as easy as a conversation. Say hello to effortless
              shopping at PriceHunt.
            </p>
          </div>
        </div>

        <div class="p-3 md:w-1/3 w-full">
          <div class="h-full bg-gray-200 p-8 rounded shadow-xl">
            <p class="leading-relaxed mb-2 text-lg">
              Whether you're searching for tech gadgets, trendy fashion, or
              household essentials, our chatbot is your 24/7 assistant,
              offering personalized recommendations and instant support
            </p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <div class="bg-grey-400 flex flex-col justify-center items-center">
    <div class="w-full max-w-screen-md bg-grey-300 p-8 rounded-lg shadow-lg">
      <div class="flex items-center">
        <input type="file" id="imageInput" class="hidden" />
        <label
          for="imageInput"
          class="flex items-center justify-center w-12 h-12 bg-gray-200 rounded-full cursor-pointer mr-4"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6 text-gray-600"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 6v6m0 0v6m0-6h6m-6 0H6"
            ></path>
          </svg>
        </label>
        <input
          type="text"
          placeholder="Enter Your Question..."
          class="flex-grow border border-gray-300 p-3 rounded-lg focus:outline-none focus:border-violet-500"
          id="promptInput"
        />
        <button
          class="bg-violet-500 hover:bg-violet-600 text-white font-semibold py-3 px-6 rounded-lg ml-4"
          id="submitButton"
        >
          Search
        </button>
      </div>
    </div>

    <div
      class="w-full max-w-screen-md bg-grey-300 p-8 rounded-lg shadow-lg mt-4"
      id="outputBox"
    >
      <p id="outputText" class="text-gray-900"></p>
    </div>
  </div>

  <script type="importmap">
    {
      "imports": {
        "@google/generative-ai": "https://esm.run/@google/generative-ai"
      }
    }
  </script>

  <script type="module">
    import { GoogleGenerativeAI } from "@google/generative-ai";
    let model;
    const fileInputEl = document.querySelector("input[type=file]");
    const promptInputEl = document.querySelector("input[type=text]");
    const submitButton = document.getElementById("submitButton");
    const outputTextEl = document.getElementById("outputText");
    const outputBox = document.getElementById("outputBox");

    async function preprompt() {
      const imageSelected = fileInputEl.files.length > 0;
      const prePrompt =
        "in next prompt i will provide any product or any query about products ,please provide details or specifications about the product shown. user can inquire about the product's features, specifications, or related information. For example, user can ask about the product's size, color, material, functionality, or any other relevant details.if the user enter any another question which is irrelevant other than products that are sold on ecommerse websites then print 'Please ask a specific question related to products'";
      const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    }
    async function processInput() {
      const imageSelected = fileInputEl.files.length > 0;
      if (imageSelected) {
        const imageParts = await Promise.all(
          [...fileInputEl.files].map(fileToGenerativePart)
        );
        const base64EncodedImage = imageParts[0].inlineData.data;
        const image = {
          inlineData: {
            data: base64EncodedImage,
            mimeType: "image/png",
          },
        };

        const prompt =
          promptInputEl.value ||
          "Explain the specifications or details of the product shown in the image.";
        const result = await model.generateContent([prompt, image]);
        const text = result.response.text();

        if (
          prompt.includes("who") ||
          prompt.includes("funny") ||
          prompt.includes("jokes") ||
          prompt.includes("quizzes") ||
          text.includes("riddles") ||
          prompt.includes("games") ||
          prompt.includes("facts") ||
          prompt.includes("random") ||
          prompt.includes("weather updates") ||
          prompt.includes("recipe") ||
          prompt.includes("random") ||
          prompt.includes("code") ||
          prompt.includes("will you marry me") ||
          prompt.includes("girlfriend") ||
          prompt.includes("recipe")
        ) {
          outputTextEl.innerText =
            "Please ask a specific question related to products.";
        } else {
          outputTextEl.innerText = text;
        }

        adjustOutputBoxHeight();
      } else {
        const prompt = promptInputEl.value;
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        const result = await model.generateContent(prompt);
        const text = result.response.text();

        if (
          prompt.includes("who") ||
          prompt.includes("funny") ||
          prompt.includes("jokes") ||
          prompt.includes("quizzes") ||
          text.includes("riddles") ||
          prompt.includes("games") ||
          prompt.includes("facts") ||
          prompt.includes("random") ||
          prompt.includes("weather updates") ||
          prompt.includes("recipe") ||
          prompt.includes("random") ||
          prompt.includes("code") ||
          prompt.includes("will you marry me") ||
          prompt.includes("girlfriend") ||
          prompt.includes("recipe")
        ) {
          outputTextEl.innerText =
            "Please ask a specific question related to products.";
        } else {
          outputTextEl.innerText = text;
        }
        adjustOutputBoxHeight();
      }
    }

    submitButton.addEventListener("click", async () => {
      await processInput();
    });

    const API_KEY = "AIzaSyDem7C-RhaccnAAbjgg4dyGFaCiTMhmDzY";
    const genAI = new GoogleGenerativeAI(API_KEY);

    // Converts a File object to a GoogleGenerativeAI.Part object
    async function fileToGenerativePart(file) {
      const base64EncodedDataPromise = new Promise((resolve) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result.split(",")[1]);
        reader.readAsDataURL(file);
      });
      return {
        inlineData: {
          data: await base64EncodedDataPromise,
          mimeType: file.type,
        },
      };
    }

    async function run() {
      model = genAI.getGenerativeModel({ model: "gemini-pro-vision" });
    }

    function adjustOutputBoxHeight() {
      outputBox.style.height = "auto";
      const computedHeight = window.getComputedStyle(outputBox).height;
      outputBox.style.height = computedHeight;
    }
    document.addEventListener("DOMContentLoaded", async () => {
      await preprompt();
    });

    run();
  </script>